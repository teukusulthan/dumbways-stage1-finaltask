{"version":3,"file":"index.js","sources":["../../lib/opcodes.ts","../../lib/resolution.ts","../../lib/well-known.ts","../../index.ts"],"sourcesContent":["import type {\n  AppendOpcode,\n  AttrSplatOpcode,\n  BlockOpcode,\n  CallOpcode,\n  CloseElementOpcode,\n  CommentOpcode,\n  ComponentAttrOpcode,\n  ComponentOpcode,\n  ConcatOpcode,\n  CurryOpcode,\n  DebuggerOpcode,\n  DynamicArgOpcode,\n  DynamicAttrOpcode,\n  EachOpcode,\n  FlushElementOpcode,\n  GetDynamicVarOpcode,\n  GetFreeAsComponentHeadOpcode,\n  GetFreeAsComponentOrHelperHeadOpcode,\n  GetFreeAsHelperHeadOpcode,\n  GetFreeAsModifierHeadOpcode,\n  GetLexicalSymbolOpcode,\n  GetStrictKeywordOpcode,\n  GetSymbolOpcode,\n  HasBlockOpcode,\n  HasBlockParamsOpcode,\n  IfInlineOpcode,\n  IfOpcode,\n  InElementOpcode,\n  InvokeComponentOpcode,\n  LetOpcode,\n  LogOpcode,\n  ModifierOpcode,\n  NotOpcode,\n  OpenElementOpcode,\n  OpenElementWithSplatOpcode,\n  StaticArgOpcode,\n  StaticAttrOpcode,\n  StaticComponentAttrOpcode,\n  StrictBlockOpcode,\n  StrictModifierOpcode,\n  TrustingAppendOpcode,\n  TrustingComponentAttrOpcode,\n  TrustingDynamicAttrOpcode,\n  UndefinedOpcode,\n  WithDynamicVarsOpcode,\n  YieldOpcode,\n} from '@glimmer/interfaces';\n\nexport const opcodes = {\n  Append: 1 satisfies AppendOpcode,\n  TrustingAppend: 2 satisfies TrustingAppendOpcode,\n  Comment: 3 satisfies CommentOpcode,\n  Modifier: 4 satisfies ModifierOpcode,\n  StrictModifier: 5 satisfies StrictModifierOpcode,\n  Block: 6 satisfies BlockOpcode,\n  StrictBlock: 7 satisfies StrictBlockOpcode,\n  Component: 8 satisfies ComponentOpcode,\n  OpenElement: 10 satisfies OpenElementOpcode,\n  OpenElementWithSplat: 11 satisfies OpenElementWithSplatOpcode,\n  FlushElement: 12 satisfies FlushElementOpcode,\n  CloseElement: 13 satisfies CloseElementOpcode,\n  StaticAttr: 14 satisfies StaticAttrOpcode,\n  DynamicAttr: 15 satisfies DynamicAttrOpcode,\n  ComponentAttr: 16 satisfies ComponentAttrOpcode,\n  AttrSplat: 17 satisfies AttrSplatOpcode,\n  Yield: 18 satisfies YieldOpcode,\n  DynamicArg: 20 satisfies DynamicArgOpcode,\n  StaticArg: 21 satisfies StaticArgOpcode,\n  TrustingDynamicAttr: 22 satisfies TrustingDynamicAttrOpcode,\n  TrustingComponentAttr: 23 satisfies TrustingComponentAttrOpcode,\n  StaticComponentAttr: 24 satisfies StaticComponentAttrOpcode,\n  Debugger: 26 satisfies DebuggerOpcode,\n  Undefined: 27 satisfies UndefinedOpcode,\n  Call: 28 satisfies CallOpcode,\n  Concat: 29 satisfies ConcatOpcode,\n  GetSymbol: 30 satisfies GetSymbolOpcode,\n  GetLexicalSymbol: 32 satisfies GetLexicalSymbolOpcode,\n  GetStrictKeyword: 31 satisfies GetStrictKeywordOpcode,\n  GetFreeAsComponentOrHelperHead: 35 satisfies GetFreeAsComponentOrHelperHeadOpcode,\n  GetFreeAsHelperHead: 37 satisfies GetFreeAsHelperHeadOpcode,\n  GetFreeAsModifierHead: 38 satisfies GetFreeAsModifierHeadOpcode,\n  GetFreeAsComponentHead: 39 satisfies GetFreeAsComponentHeadOpcode,\n  InElement: 40 satisfies InElementOpcode,\n  If: 41 satisfies IfOpcode,\n  Each: 42 satisfies EachOpcode,\n  Let: 44 satisfies LetOpcode,\n  WithDynamicVars: 45 satisfies WithDynamicVarsOpcode,\n  InvokeComponent: 46 satisfies InvokeComponentOpcode,\n  HasBlock: 48 satisfies HasBlockOpcode,\n  HasBlockParams: 49 satisfies HasBlockParamsOpcode,\n  Curry: 50 satisfies CurryOpcode,\n  Not: 51 satisfies NotOpcode,\n  IfInline: 52 satisfies IfInlineOpcode,\n  GetDynamicVar: 53 satisfies GetDynamicVarOpcode,\n  Log: 54 satisfies LogOpcode,\n} as const;\n","import type {\n  ResolveAsComponentHeadResolution,\n  ResolveAsComponentOrHelperHeadResolution,\n  ResolveAsHelperHeadResolution,\n  ResolveAsModifierHeadResolution,\n  StrictResolution,\n} from '@glimmer/interfaces';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type resolution =\n  | ResolveAsComponentOrHelperHeadResolution\n  | ResolveAsHelperHeadResolution\n  | ResolveAsComponentHeadResolution\n  | ResolveAsModifierHeadResolution\n  | StrictResolution;\n\nexport const resolution = {\n  Strict: 0 satisfies StrictResolution,\n  ResolveAsComponentOrHelperHead: 1 satisfies ResolveAsComponentOrHelperHeadResolution,\n  ResolveAsHelperHead: 5 satisfies ResolveAsHelperHeadResolution,\n  ResolveAsModifierHead: 6 satisfies ResolveAsModifierHeadResolution,\n  ResolveAsComponentHead: 7 satisfies ResolveAsComponentHeadResolution,\n} as const;\n","import type {\n  ATag,\n  ClassAttr,\n  DivTag,\n  HrefAttr,\n  IdAttr,\n  NameAttr,\n  PTag,\n  SpanTag,\n  StyleAttr,\n  TypeAttr,\n  ValueAttr,\n} from '@glimmer/interfaces';\n\nexport const WellKnownAttrNames = {\n  class: 0 satisfies ClassAttr,\n  id: 1 satisfies IdAttr,\n  value: 2 satisfies ValueAttr,\n  name: 3 satisfies NameAttr,\n  type: 4 satisfies TypeAttr,\n  style: 5 satisfies StyleAttr,\n  href: 6 satisfies HrefAttr,\n} as const;\n\nexport const WellKnownTagNames = {\n  div: 0 satisfies DivTag,\n  span: 1 satisfies SpanTag,\n  p: 2 satisfies PTag,\n  a: 3 satisfies ATag,\n} as const;\n","import type { Expression, Expressions, Statement, Statements } from '@glimmer/interfaces';\n\nimport { opcodes } from './lib/opcodes';\n\nexport { opcodes as SexpOpcodes } from './lib/opcodes';\nexport { resolution as VariableResolutionContext } from './lib/resolution';\nexport { WellKnownAttrNames, WellKnownTagNames } from './lib/well-known';\n\nexport function is<T>(variant: number): (value: unknown) => value is T {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (value: any): value is T {\n    return Array.isArray(value) && value[0] === variant;\n  };\n}\n\n// Statements\nexport const isFlushElement = is<Statements.FlushElement>(opcodes.FlushElement);\n\nexport function isAttribute(val: Statement): val is Statements.Attribute {\n  return (\n    val[0] === opcodes.StaticAttr ||\n    val[0] === opcodes.DynamicAttr ||\n    val[0] === opcodes.TrustingDynamicAttr ||\n    val[0] === opcodes.ComponentAttr ||\n    val[0] === opcodes.StaticComponentAttr ||\n    val[0] === opcodes.TrustingComponentAttr ||\n    val[0] === opcodes.AttrSplat ||\n    val[0] === opcodes.Modifier\n  );\n}\n\nexport function isStringLiteral(expr: Expression): expr is Expressions.StringValue {\n  return typeof expr === 'string';\n}\n\nexport function getStringFromValue(expr: Expressions.StringValue): string {\n  return expr;\n}\n\nexport function isArgument(val: Statement): val is Statements.Argument {\n  return val[0] === opcodes.StaticArg || val[0] === opcodes.DynamicArg;\n}\n\nexport function isHelper(expr: Expression): expr is Expressions.Helper {\n  return Array.isArray(expr) && expr[0] === opcodes.Call;\n}\n\n// Expressions\nexport const isGet = is<Expressions.GetSymbol>(opcodes.GetSymbol);\n"],"names":["opcodes","Append","TrustingAppend","Comment","Modifier","StrictModifier","Block","StrictBlock","Component","OpenElement","OpenElementWithSplat","FlushElement","CloseElement","StaticAttr","DynamicAttr","ComponentAttr","AttrSplat","Yield","DynamicArg","StaticArg","TrustingDynamicAttr","TrustingComponentAttr","StaticComponentAttr","Debugger","Undefined","Call","Concat","GetSymbol","GetLexicalSymbol","GetStrictKeyword","GetFreeAsComponentOrHelperHead","GetFreeAsHelperHead","GetFreeAsModifierHead","GetFreeAsComponentHead","InElement","If","Each","Let","WithDynamicVars","InvokeComponent","HasBlock","HasBlockParams","Curry","Not","IfInline","GetDynamicVar","Log","resolution","Strict","ResolveAsComponentOrHelperHead","ResolveAsHelperHead","ResolveAsModifierHead","ResolveAsComponentHead","WellKnownAttrNames","class","id","value","name","type","style","href","WellKnownTagNames","div","span","p","a","is","variant","Array","isArray","isFlushElement","isAttribute","val","isStringLiteral","expr","getStringFromValue","isArgument","isHelper","isGet"],"mappings":"MAiDaA,EAAU,CACrBC,OAAQ,EACRC,eAAgB,EAChBC,QAAS,EACTC,SAAU,EACVC,eAAgB,EAChBC,MAAO,EACPC,YAAa,EACbC,UAAW,EACXC,YAAa,GACbC,qBAAsB,GACtBC,aAAc,GACdC,aAAc,GACdC,WAAY,GACZC,YAAa,GACbC,cAAe,GACfC,UAAW,GACXC,MAAO,GACPC,WAAY,GACZC,UAAW,GACXC,oBAAqB,GACrBC,sBAAuB,GACvBC,oBAAqB,GACrBC,SAAU,GACVC,UAAW,GACXC,KAAM,GACNC,OAAQ,GACRC,UAAW,GACXC,iBAAkB,GAClBC,iBAAkB,GAClBC,+BAAgC,GAChCC,oBAAqB,GACrBC,sBAAuB,GACvBC,uBAAwB,GACxBC,UAAW,GACXC,GAAI,GACJC,KAAM,GACNC,IAAK,GACLC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,eAAgB,GAChBC,MAAO,GACPC,IAAK,GACLC,SAAU,GACVC,cAAe,GACfC,IAAK,IC/EMC,EAAa,CACxBC,OAAQ,EACRC,+BAAgC,EAChCC,oBAAqB,EACrBC,sBAAuB,EACvBC,uBAAwB,GCPbC,EAAqB,CAChCC,MAAO,EACPC,GAAI,EACJC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,KAAM,GAGKC,EAAoB,CAC/BC,IAAK,EACLC,KAAM,EACNC,EAAG,EACHC,EAAG,GCpBE,SAASC,EAAMC,GAEpB,OAAO,SAAUX,GACf,OAAOY,MAAMC,QAAQb,IAAUA,EAAM,KAAOW,CAC9C,CACF,CAGaG,MAAAA,EAAiBJ,EAA4BlE,EAAQW,cAE3D,SAAS4D,EAAYC,GAC1B,OACEA,EAAI,KAAOxE,EAAQa,YACnB2D,EAAI,KAAOxE,EAAQc,aACnB0D,EAAI,KAAOxE,EAAQoB,qBACnBoD,EAAI,KAAOxE,EAAQe,eACnByD,EAAI,KAAOxE,EAAQsB,qBACnBkD,EAAI,KAAOxE,EAAQqB,uBACnBmD,EAAI,KAAOxE,EAAQgB,WACnBwD,EAAI,KAAOxE,EAAQI,QAEvB,CAEO,SAASqE,EAAgBC,GAC9B,MAAuB,iBAATA,CAChB,CAEO,SAASC,EAAmBD,GACjC,OAAOA,CACT,CAEO,SAASE,EAAWJ,GACzB,OAAOA,EAAI,KAAOxE,EAAQmB,WAAaqD,EAAI,KAAOxE,EAAQkB,UAC5D,CAEO,SAAS2D,EAASH,GACvB,OAAON,MAAMC,QAAQK,IAASA,EAAK,KAAO1E,EAAQyB,IACpD,CAGaqD,MAAAA,EAAQZ,EAA0BlE,EAAQ2B"}